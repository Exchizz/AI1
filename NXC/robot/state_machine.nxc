// Defines
float THRESHOLD1 = 30;//40// light sensor threshold
float THRESHOLD2 = 20; //40

#define P 0.5
#define I 0.000
#define D 0

#define P_s P
#define I_s I
#define D_s D

#define REVERSE_ROTATION 270
#define TURN_ROTATION 180
#define TURN_REVERSE 120

// PID line follower parameters
int actual_position;
int error;
int previous_error;

float proportional;
float integral;
float derivative;
float result;

float right;
float left;
float speed = 50 ;

int dt = 20;

// Sensors

float sensor_1; // Line follower
float sensor_2; // Line follower
float sensor_3; // Segment sensor

float sensor_1_last = 0; // Line follower
float sensor_2_last = 0; // Line follower
float sensor_3_last = 0; // Segment sensor

// states
int STATE = 1; // initialized as READ_COMMAND
#define READ_COMMAND 1
#define TURN_RIGHT 2
#define TURN_LEFT 3
#define REVERSE 4
#define LINE_FOLLOW 5
#define LINE_FOLLOW_SHORT 6
#define REVERSE_ROTATE 9
#define REVERSE_LEFT 10
#define REVERSE_RIGHT 11


// substates
int substate;
#define RIGHT 7
#define LEFT 8


int i = 0;        // iterator in plan
int prev_count;   // prev count check integer (iterator)

// READ_COMMAND variables, previous, current and next command in plan
char prev;
char curr;
char next;

// bools for line following
bool line_follow_short = false;
bool linefollow_12_reached = false;
bool linefollow_3_reached = false;

bool current = false;
bool last = false;


bool reverse_right = false;
bool reverse_left = false;
bool reverse_total = false;

// the master plan
string plan = "RRLURRLLDLDDRUUDRRRLLUUDRRRRRRLURRDDLUUDLLLDDLUUDLURRRRRLUURRDLLRRDDLUUDLLUULLLDDDULDRRLLLLURRRLLURRLDRRRRRRLLUULLLDDULDRRRRLDRUUUDDLDDLUUDLUR";
//string plan = "UDDDD"
int line_follow_count = 0;


// Light Sensor Averages
float sensor_1_slow = 0;
float sensor_2_slow = 0;
float sensor_3_slow = 0;

float sensor_1_fast = 0;
float sensor_2_fast = 0;
float sensor_3_fast = 0;

// weights for averages
float alpha_fast = 0.8;
float alpha_slow = 0.5;

bool sampleRun = false;

Tone sweepUp[] = {
  TONE_C4, MS_50,
  TONE_E4, MS_50,
  TONE_G4, MS_50,
  TONE_C5, MS_50,
  TONE_E5, MS_50,
  TONE_G5, MS_50,
  TONE_C6, MS_200
};

task state_machine(){

  while(!sampleRun);

  while(true){

    switch(STATE){
      case READ_COMMAND:

        prev_count = (i-1 > 0 ? i -1 : 0);

        if(i >= ArrayLen(plan) -1){
          TextOut(0,LCD_LINE1, "End of Plan");
          OnFwdSync(OUT_AB, 0, 0);
          PlayTones(sweepUp);
          Wait(10000);
        }
        prev = plan[prev_count];
        curr = plan[i];
        next = plan[i+1];

        i++;
        PlayTone(2000,100);

        switch (prev) {
          case 'U':
            switch (curr) {
              case 'U':
                STATE = LINE_FOLLOW;
              break;

              case 'D':
                STATE = REVERSE;
              break;

              case 'L':
                STATE = TURN_LEFT;
              break;

              case 'R':
                STATE = TURN_RIGHT;
              break;
            }
          break;

          case 'D':
            switch (curr) {
              case 'U':

                STATE = REVERSE;
              break;

              case 'D':
                STATE = LINE_FOLLOW;
              break;

              case 'L':
                STATE = TURN_RIGHT;
              break;

              case 'R':
                STATE = TURN_LEFT;
              break;
            }
          break;

          case 'L':
          switch (curr) {
            case 'U':
              STATE = TURN_RIGHT;
            break;

            case 'D':
              STATE = TURN_LEFT;
            break;

            case 'L':
              STATE = LINE_FOLLOW;
            break;

            case 'R':
              STATE = REVERSE;
            break;
          }
          break;

          case 'R':
          switch (curr) {
            case 'U':
              STATE = TURN_LEFT;
            break;

            case 'D':
              STATE = TURN_RIGHT;
            break;

            case 'L':

              STATE = REVERSE;
            break;

            case 'R':
              STATE = LINE_FOLLOW;
            break;
          }
          break;
        }


        break;

        case TURN_RIGHT:
        //PlayTone(3000,100);
          if(line_follow_short){
            RotateMotorEx(OUT_AB, 50, TURN_ROTATION, 100, true, true);
            line_follow_short = false;
            STATE = LINE_FOLLOW;
          }
          else{
          substate = RIGHT;

          STATE = LINE_FOLLOW_SHORT;
        }
          break;

        case TURN_LEFT:
        //PlayTone(3000,100);
          if(line_follow_short){
            RotateMotorEx(OUT_AB, 50, TURN_ROTATION, -100, true, true);
            line_follow_short = false;
            STATE = LINE_FOLLOW;
          }
          else{
          substate = LEFT;

          STATE = LINE_FOLLOW_SHORT;
        }
          break;

        case REVERSE:

        OnRevSync(OUT_AB, 70, 0);  //Backwards movement, (output, output_power, turnpct (needs to be 0))
        Wait(400);

        RotateMotorEx(OUT_AB, 70, REVERSE_ROTATION, -100, true, true); // 180 degrees spin, (output, output_power, degrees of motor spin, turnpct, sync set true, stop set true)
        STATE = LINE_FOLLOW;

          /*previous_error = error;
          while (1) {

            if( sensor_3 < THRESHOLD2){
              current = true;
            } else {
              current = false;
            }

            if(last == false && current == true) {
                OnFwdSync(OUT_AB, 0, 0);
                //PlayTone(1000, 100);
                last = current;
                break;
             }
            last = current;


            error = sensor_1 - sensor_2;

            proportional = P * error;
            integral = I + error;
            derivative = (error - previous_error) / dt;

            result = proportional + I * dt * integral + D * derivative;

            previous_error = error;

            left = speed + result;                        // adjust left wheel
            right = speed - result;                       // adjust right wheel

              // Adjust the left and right motor value.
             if (left >   100) left  =  100;
             if (left <  -100) left  = -100;
             if (right >  100) right =  100;
             if (right < -100) right = -100;


            if (left < 0 )                              // check direction (OnFwd statement can't have negative input)
              {
                 OnFwd(OUT_A,-left);  //OnFwd(OUT_A,-left);
               }
             else
               {
                 OnRev(OUT_A,left); //OnRev(OUT_A,left);
               }


             if (right < 0 )                              // check direction (OnFwd statement cann't have negative input)
               {
                 OnFwd(OUT_B,-right); //OnFwd(OUT_B,-right);
               }
              else
                {
                  OnRev(OUT_B,right); //OnRev(OUT_B,right);
                }


             Wait(dt);
          }*/

          /*switch(curr){
            case 'R':
              if(next == 'U'){
                STATE = REVERSE_RIGHT;
              }
              else if (next == 'D'){
                STATE = REVERSE_LEFT;
              }
              else if(next == 'L'){
                STATE = REVERSE_ROTATE;
              }

              break;
            case 'L':
              if(next == 'U'){
                STATE = REVERSE_LEFT;
              }
              else if (next == 'D'){
                STATE = REVERSE_RIGHT;
              }
              else if(next == 'L'){
                STATE = REVERSE_ROTATE;
              }

              break;
            case 'U':
              if(next == 'R'){
                STATE = REVERSE_LEFT;
              }
              else if (next == 'L'){
                STATE = REVERSE_RIGHT;
              }
              else if(next == 'U'){
                STATE = REVERSE_ROTATE;
              }

              break;
            case 'D':
              if(next == 'R'){
                STATE = REVERSE_RIGHT;
              }
              else if (next == 'L'){
                STATE = REVERSE_LEFT;
              }
              else if(next == 'D'){
                STATE = REVERSE_ROTATE;
              }

            }
            break;

          */
          /*
          if(reverse_right){
            line_follow_short = true;
            RotateMotorEx(OUT_AB, 50, ReverseRotation, -100, true, true);
            //STATE = TURN_RIGHT;
            TextOut(0, LCD_LINE1, "right");
            Wait(500);
          }
          else if(reverse_left){
            line_follow_short = true;
            //STATE = TURN_LEFT;
          }
          else if(reverse_total){
            RotateMotorEx(OUT_AB, 50, ReverseRotation, -100, true, true);
            line_follow_short = true;
            reverse_total = false;
          }*/

        /*case REVERSE_LEFT:
          PlayTone(3000,100);
          RotateMotorEx(OUT_AB, 50, TURN_REVERSE, -100, true, true);
          //PlayTone(3000,100);
          i++;
          STATE = LINE_FOLLOW;
          break;

        case REVERSE_RIGHT:
          PlayTone(3000,100);
          RotateMotorEx(OUT_AB, 50, TURN_REVERSE, 100, true, true);
          i++;
          STATE = LINE_FOLLOW;
          break;

        case REVERSE_ROTATE:
          PlayTone(3000,100);
          RotateMotorEx(OUT_AB, 50, REVERSE_ROTATION, -100, true, true);
          i++;
          STATE = LINE_FOLLOW;
          break;
*/
        case LINE_FOLLOW:
          //PlayTone(3000,100);
          previous_error = error;
          line_follow_short = false;

          while (1) {

            if( sensor_1 < THRESHOLD1 && sensor_2 < THRESHOLD1){
              current = true;
            } else {
              current = false;
            }


            if(last == false && current == true) {
                OnFwdSync(OUT_AB, 0, 0);
                //PlayTone(1000, 100);
                last = current;
                break;
             }
            last = current;
            sensor_1_last = sensor_1; // Line follower
            sensor_2_last = sensor_2; // Segment sensor
            sensor_3_last = sensor_3;

            error = sensor_1 - sensor_2;

            proportional = P * error;
            integral = integral + error;
            derivative = (error - previous_error) / dt;

            result = proportional + I * dt * integral + D * derivative;

            previous_error = error;

            left = speed - result;                        // adjust left wheel
            right = speed + result;                       // adjust right wheel

              // Adjust the left and right motor value.
             if (left >   100) left  =  100;
             if (left <  -100) left  = -100;
             if (right >  100) right =  100;
             if (right < -100) right = -100;


            if (left < 0 )                              // check direction (OnFwd statement can't have negative input)
              {
               OnFwd(OUT_A,left);  //OnFwd(OUT_A,-left);
              }
            else
              {
               OnRev(OUT_A,-left);   //OnRev(OUT_A,left);
              }


             if (right < 0 )                              // check direction (OnFwd statement cann't have negative input)
              {
               OnFwd(OUT_B,right);   //OnFwd(OUT_B,-right);
              }
            else
              {
                OnRev(OUT_B,-right);   //OnRev(OUT_B,right);
              }


             Wait(dt);
          }

          STATE = READ_COMMAND;
          break;

        case LINE_FOLLOW_SHORT:

          previous_error = error;
          while (1) {

            if( sensor_3 < THRESHOLD2){
              current = true;
            } else {
              current = false;
            }


            if(last == false && current == true) {
                OnFwdSync(OUT_AB, 0, 0);
                //PlayTone(2000, 100);
                last = current;
                break;
             }
            last = current;

            error = sensor_1 - sensor_2;

            proportional = P_s * error;
            integral = I_s + error;
            derivative = (error - previous_error) / dt;

            result = proportional + I * dt * integral + D_s * derivative;

            previous_error = error;

            left = speed - result;                        // adjust left wheel
            right = speed + result;                       // adjust right wheel

              // Adjust the left and right motor value.
             if (left >   100) left  =  100;
             if (left <  -100) left  = -100;
             if (right >  100) right =  100;
             if (right < -100) right = -100;


             if (left < 0 )                              // check direction (OnFwd statement can't have negative input)
               {
                OnFwd(OUT_A,left);  //OnFwd(OUT_A,-left);
               }
             else
               {
                OnRev(OUT_A,-left);   //OnRev(OUT_A,left);
               }


              if (right < 0 )                              // check direction (OnFwd statement cann't have negative input)
               {
                OnFwd(OUT_B,right);   //OnFwd(OUT_B,-right);
               }
             else
               {
                 OnRev(OUT_B,-right);   //OnRev(OUT_B,right);
               }
             Wait(dt);
          }

            switch(substate){
              case LEFT:
                line_follow_short = true;
                STATE = TURN_LEFT;
                break;

              case RIGHT:
                line_follow_short = true;
                STATE = TURN_RIGHT;
                break;
            }
          break;
          }
    }
}


task light_sensor(){

  SetSensorLight(IN_1); // Line follower
  SetSensorLight(IN_2); // Line follower
  SetSensorLight(IN_3); // Segment sensor

  float avg_sensor_1 = 0;
  float avg_sensor_2 = 0;
  float avg_sensor_3_white = 0;
  float avg_sensor_3_black = 0;

  for(int i = 0; i < 10; i++){
    sensor_1 = Sensor(IN_1);
    sensor_2 = Sensor(IN_2);
    sensor_3 = Sensor(IN_3);

    avg_sensor_1 +=sensor_1;
    avg_sensor_2 +=sensor_2;
    avg_sensor_3_white +=sensor_3;

  }

  avg_sensor_1/=10;
  avg_sensor_2/=10;
  avg_sensor_3_white/=10;

  THRESHOLD1 = (avg_sensor_1 + avg_sensor_2) / 2;
  PlayTone(1000,200);
  Wait(3000);

  for(int i = 0; i < 10; i++){
    sensor_3 = Sensor(IN_3);
    avg_sensor_3_black +=sensor_3;
  }
    avg_sensor_3_black/=10;
    THRESHOLD2 = (avg_sensor_3_white + avg_sensor_3_black) / 2;

    PlayTone(1000,100);
    TextOut(0,LCD_LINE2, NumToStr(THRESHOLD1));
    TextOut(0,LCD_LINE3, NumToStr(THRESHOLD2));
    Wait(1000);



  while(true){



    sensor_1 = Sensor(IN_1);
    sensor_2 = Sensor(IN_2);
    sensor_3 = Sensor(IN_3);



    sensor_1_fast = (alpha_fast * sensor_1) + (1.0 - alpha_fast) * sensor_1_fast; //fast
    sensor_2_fast = (alpha_fast * sensor_2) + (1.0 - alpha_fast) * sensor_2_fast; //fast
    sensor_3_fast = (alpha_fast * sensor_3) + (1.0 - alpha_fast) * sensor_3_fast; //fast

    sensor_1_slow = (alpha_slow * sensor_1) + (1.0 - alpha_slow) * sensor_1_slow; //slow
    sensor_2_slow = (alpha_slow * sensor_2) + (1.0 - alpha_slow) * sensor_2_slow; //slow
    sensor_3_slow = (alpha_slow * sensor_3) + (1.0 - alpha_slow) * sensor_3_slow; //slow



    sampleRun = true;


    //TextOut(0,LCD_LINE2, "sensor_1_fast and sensor_1_slow: ");
    //TextOut(0,LCD_LINE3, NumToStr(sensor_1_fast));
    //TextOut(0,LCD_LINE4, ", ");
    //TextOut(0,LCD_LINE5, NumToStr(sensor_1_slow));

    //Wait(1000);



  }
}

task main(){

  Precedes(light_sensor, state_machine);

}
