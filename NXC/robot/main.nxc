

// Defines
#define THRESHOLD1 45 // light sensor threshold
#define THRESHOLD2 35


#define TURNSPEED 35
#define SPEED 50

// Sensors
int sensor_1; // Line follower
int sensor_2; // Line follower
int sensor_3; // Segment sensor


// Variables

string plan; // declared solution array of max 500 elements
char lastmove; // last move variable, should be P
char current;

int len;



// Bools
bool intersection_reached = false; // Bool for segment reached
bool busy = false; // Bool for indicating whether a task is busy doing a move.
bool line_follow = false; // Bool for checking line follow.

bool turn_right = false;
bool turn_right_complete = false;
bool turn_left = false;
bool turn_left_complete = false;
bool turn_complete = false;

bool reverse = false;
bool turn_reverse = false;
bool reverse_complete = false;

//bool reverse = false; // Bool for reverse movement


//-----------------------------------------------------------------------------
//------------------------------Line follower----------------------------------
sub follow_line(char lastmove, char current, bool busy){

// Default case, first element in solution array
  if(lastmove == 'P'){
    lastmove = current;
  line_follow = true;
  }

  switch(current){
    case 'U':
        if(lastmove == 'U'){
          line_follow = true;

          }
        else
          line_follow = false;
      break;

    case 'D':
        if(lastmove == 'D'){
          line_follow = true;

        }
        else
          line_follow = false;
      break;

    case 'L':
        if(lastmove == 'L'){
          line_follow = true;

          }
        else
          line_follow = false;
      break;
    case 'R':
        if(lastmove == 'R'){
          line_follow = true;

          }
        else
          line_follow = false;
      break;

    default:
      break;
  }



if(line_follow && busy == false){
  intersection_reached = false;

  	while(intersection_reached == false){

      SetSensorLight(IN_1); // Line follower
      SetSensorLight(IN_2); // Line follower
      SetSensorLight(IN_3); // Segment sensor

      sensor_1 = Sensor(IN_1);
      sensor_2 = Sensor(IN_2);
      sensor_3 = Sensor(IN_3);

      busy = true;

        if (sensor_3 < THRESHOLD2){
          intersection_reached = true;
          Wait(150);
          OnFwdSync(OUT_AB, 0, 0);
        }

  		  else if(sensor_1 > THRESHOLD1 && sensor_2 > THRESHOLD1){
  			  OnFwdSync(OUT_AB, SPEED, 0);

  		  }

        else if(sensor_1 > THRESHOLD1){
          OnFwd(OUT_A, 0);
          OnFwd(OUT_B, TURNSPEED);

        }

        else if(sensor_2 > THRESHOLD1){
        	OnFwd(OUT_B, 0);
        	OnFwd(OUT_A, TURNSPEED);

        }
    }
  busy = false;
  intersection_reached = false;
  }
}


//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
//-----------------------------------turn--------------------------------------
sub turn_behaviour(char lastmove, char current, bool busy){

  switch(lastmove){
    case 'U':
        if(current == 'R'){
          // turn right orientation wise
          turn_right = true;
        }
        else if(current == 'L'){
          // turn left orientation wise
          turn_left = true;
        }
        else{
          turn_left = false;
          turn_right = false;
        }

        break;
    case 'D':
        if(current == 'R'){
          // turn left orientation wise
          turn_left = true;
        }
        else if(current == 'L'){
          // turn right orientation wise
          turn_right = true;
        }
        else{
          turn_left = false;
          turn_right = false;
        }
        break;
    case 'L':
        if(current == 'U'){
          // turn left orientation wise
          turn_right = true;
        }
        else if(current == 'D'){
          // turn right orientation wise
          turn_left = true;
        }
        else{
          turn_left = false;
          turn_right = false;
        }

        break;

    case 'R':
        if(current == 'U'){
          // turn right orientation wise
          turn_left = true;
        }
        else if(current == 'D'){
          //turn left orientation wise
          turn_right = true;
        }
        else{
          turn_left = false;
          turn_right = false;
        }

        break;

    default:
        break;
  }

  if((turn_left || turn_right) && busy == false){

    while(!turn_complete) {

      busy = true;

      SetSensorLight(IN_1); // Line follower
      SetSensorLight(IN_2); // Line follower
      SetSensorLight(IN_3); // Segment sensor

      sensor_1 = Sensor(IN_1);
      sensor_2 = Sensor(IN_2);
      sensor_3 = Sensor(IN_3);

      if(sensor_1 > THRESHOLD1 && sensor_2 > THRESHOLD1){
        OnFwdSync(OUT_AB, SPEED, 0);
      }

      else if(sensor_1 > THRESHOLD1){
        OnFwd(OUT_A, 0);
        OnFwd(OUT_B, TURNSPEED);
      }
      else if(sensor_2 > THRESHOLD1){
        OnFwd(OUT_B, 0);
        OnFwd(OUT_A, TURNSPEED);
      }

      else if (sensor_1 < THRESHOLD1 && sensor_2 < THRESHOLD1) {
        OnFwdSync(OUT_AB, 0, 0);
            if (turn_right) {

              RotateMotorEx(OUT_AB, 40, 140, 100, true, true);


              intersection_reached = false;
              while(intersection_reached == false){

                SetSensorLight(IN_1); // Line follower
                SetSensorLight(IN_2); // Line follower
                SetSensorLight(IN_3); // Segment sensor

                sensor_1 = Sensor(IN_1);
                sensor_2 = Sensor(IN_2);
                sensor_3 = Sensor(IN_3);


        		  if(sensor_1 > THRESHOLD1 && sensor_2 > THRESHOLD1){
        			  OnFwdSync(OUT_AB, SPEED, 0);
        		  }

              if(sensor_1 > THRESHOLD1){
                OnFwd(OUT_A, 0);
                OnFwd(OUT_B, TURNSPEED);
              }

              if(sensor_2 > THRESHOLD1){
              	OnFwd(OUT_B, 0);
              	OnFwd(OUT_A, TURNSPEED);
              }
              if (sensor_3 < THRESHOLD2){
                turn_complete = true;
                Wait(150);
                OnFwdSync(OUT_AB, 0, 0);
              }
            }
            intersection_reached = true;

            }

            if (turn_left) {

              RotateMotorEx(OUT_AB, 50, 140, -100, true, true);


              intersection_reached = false;
              while(intersection_reached == false){

                SetSensorLight(IN_1); // Line follower
                SetSensorLight(IN_2); // Line follower
                SetSensorLight(IN_3); // Segment sensor

                sensor_1 = Sensor(IN_1);
                sensor_2 = Sensor(IN_2);
                sensor_3 = Sensor(IN_3);


        		  if(sensor_1 > THRESHOLD1 && sensor_2 > THRESHOLD1){
        			  OnFwdSync(OUT_AB, SPEED, 0);
        		  }

              if(sensor_1 > THRESHOLD1){
                OnFwd(OUT_A, 0);
                OnFwd(OUT_B, TURNSPEED);
              }

              if(sensor_2 > THRESHOLD1){
              	OnFwd(OUT_B, 0);
              	OnFwd(OUT_A, TURNSPEED);
              }
              if (sensor_3 < THRESHOLD2){
                turn_complete = true;
                Wait(150);
                OnFwdSync(OUT_AB, 0, 0);
              }
            }
            intersection_reached = true;

            }
      }
    }
    busy = false;
    turn_left = false;
    turn_right = false;
    turn_complete = false;
  }
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
//----------------------------------Reverse------------------------------------
sub reverse_behaviour(char lastmove, char current, bool busy){


  switch(lastmove){
    case 'U':
        if(current == 'D'){
          // turn right orientation wise
          reverse = true;
        }
        else{
          reverse = false;
        }
        break;
    case 'D':
        if(current == 'U'){
          // turn left orientation wise
          reverse = true;
        }
        else{
          reverse = false;
        }
        break;
    case 'L':
        if(current == 'R'){
          // turn left orientation wise
          reverse = true;
        }
        else{
          reverse = false;
        }
        break;

    case 'R':
        if(current == 'L'){
          // turn right orientation wise
          reverse = true;
        }
        else{
          reverse = false;
        }
        break;

    default:
        break;
  }

if (reverse && !busy) {
  reverse_complete = false;

  while(!reverse_complete) {

    busy = true;

    SetSensorLight(IN_1); // Line follower
    SetSensorLight(IN_2); // Line follower
    SetSensorLight(IN_3); // Segment sensor

    sensor_1 = Sensor(IN_1);
    sensor_2 = Sensor(IN_2);
    sensor_3 = Sensor(IN_3);

    //  Backwards linefollow for a short while (needs to be corected for backwards movement)

    for (int i = 0; i < 100; i++) { // dummy counter, adjust...
      SetSensorLight(IN_1); // Line follower
      SetSensorLight(IN_2); // Line follower
      SetSensorLight(IN_3); // Segment sensor

      sensor_1 = Sensor(IN_1);
      sensor_2 = Sensor(IN_2);
      sensor_3 = Sensor(IN_3);
      if(sensor_1 > THRESHOLD1 && sensor_2 > THRESHOLD1){
        OnFwdSync(OUT_AB, -SPEED, 0);
      }

      else if(sensor_1 > THRESHOLD1){
        OnFwd(OUT_B, 0);
        OnFwd(OUT_A, -TURNSPEED);
      }
      else if(sensor_2 > THRESHOLD1){
        OnFwd(OUT_A, 0);
        OnFwd(OUT_B, - TURNSPEED);
      }
    }


    // Perform the 180 degree turn - turns until linefollow sensors are on to of
    // line again.
    turn_reverse = false;
    while (!turn_reverse) {
      SetSensorLight(IN_1); // Line follower
      SetSensorLight(IN_2); // Line follower
      SetSensorLight(IN_3); // Segment sensor

      sensor_1 = Sensor(IN_1);
      sensor_2 = Sensor(IN_2);
      sensor_3 = Sensor(IN_3);

      RotateMotorEx(OUT_AB, 25, 10, 100, true, true);

      if (sensor_2 < THRESHOLD1) {
        if (sensor_2 > THRESHOLD1) {
          turn_reverse = true;
        }
      }
    }

    // Line follow to next segment
      while(intersection_reached == false){

        if (sensor_3 < THRESHOLD2){
          turn_complete = true;
          Wait(150);
          OnFwdSync(OUT_AB, 0, 0);
        }

        else if(sensor_1 > THRESHOLD1 && sensor_2 > THRESHOLD1){
          OnFwdSync(OUT_AB, SPEED, 0);
        }

        else if(sensor_1 > THRESHOLD1){
          OnFwd(OUT_A, 0);
          OnFwd(OUT_B, TURNSPEED);
        }

        else if(sensor_2 > THRESHOLD1){
          OnFwd(OUT_B, 0);
          OnFwd(OUT_A, TURNSPEED);
        }
      }
    intersection_reached = false;
    }
  busy = false;
  reverse_complete = true;
  reverse = false;
}
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
//---------------------------------Main Task-----------------------------------
//-----------------------------------------------------------------------------
task main(){

     plan = "UD";
     lastmove = 'P';

     if(StrIndex(plan,0) == 'U')
      lastmove = 'U';
     else if(StrIndex(plan,0) == 'D')
      lastmove = 'D';
     else if(StrIndex(plan,0) == 'R')
      lastmove = 'R';
     else if(StrIndex(plan,0) == 'L')
      lastmove = 'L';

    //string test = " ";


    len =  ArrayLen(plan);

        for (int i=0; i < len; i++)
        {

          follow_line(lastmove, plan[i], busy);
          turn_behaviour(lastmove, plan[i], busy);
          reverse_behaviour(lastmove ,plan[i], busy);

        //test[0] = StrIndex(plan,i);
        //if (StrIndex(plan,0) == 'U')
        // TextOut(0,LCD_LINE3,"test");
        //Wait(1000);

          lastmove = plan[i];

        }
        OnFwdSync(OUT_AB, 0, 0);
      }
